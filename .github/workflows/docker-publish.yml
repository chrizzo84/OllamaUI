name: Docker Publish

on:
  push:
    branches: [ main ]
    paths:
      - 'Dockerfile'
      - 'Dockerfile.multi-platform'
      - 'ollama-ui/**'
      - '.github/workflows/docker-publish.yml'
  workflow_dispatch:
  release:
    types: [published]
  schedule:
    # Run every night at 02:30 UTC
    - cron: '30 2 * * *'

permissions:
  contents: read
  packages: write

concurrency:
  group: docker-publish-${{ github.ref }}
  cancel-in-progress: true

env:
  REGISTRY: ghcr.io
  # Original mixed-case repo (cannot rely on automatic lowercasing by all tooling)
  IMAGE_NAME_ORIG: ${{ github.repository }}

jobs:
  build-and-push:
    runs-on: ubuntu-latest
    timeout-minutes: 40
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # need history for diff against previous built commit

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
        with:
          install: true

      - name: Log in to GHCR
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Compute lowercase image name
        id: names
        run: |
          echo "orig=$IMAGE_NAME_ORIG" >> $GITHUB_OUTPUT
          echo "lower=${IMAGE_NAME_ORIG,,}" >> $GITHUB_OUTPUT
        env:
          IMAGE_NAME_ORIG: ${{ env.IMAGE_NAME_ORIG }}

      - name: Fetch base image digest (ollama/ollama:latest)
        id: base_digest
        run: |
          set -euo pipefail
          docker pull -q ollama/ollama:latest > /dev/null
          # Get canonical digest (repo@sha256:...)
          DIGEST_LINE=$(docker image inspect ollama/ollama:latest --format '{{index .RepoDigests 0}}')
          # Extract just sha256:...
          BASE_DIGEST=${DIGEST_LINE##*@}
          echo "Current base image digest: $BASE_DIGEST"
          echo "digest=$BASE_DIGEST" >> $GITHUB_OUTPUT
      - name: Extract Docker metadata (always run to know actual tags)
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: |
            ${{ env.REGISTRY }}/${{ steps.names.outputs.lower }}
          tags: |
            type=ref,event=branch
            type=ref,event=tag
            type=sha
            type=raw,value=latest,enable=${{ github.ref == 'refs/heads/main' }}
            # If tag matches v* use semver patterns (produces v1.2.3, v1.2, v1)
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}
            type=semver,pattern={{major}},enable=${{ startsWith(github.ref, 'refs/tags/v') }}
          labels: |
            org.opencontainers.image.source=${{ github.repositoryUrl }}
            org.opencontainers.image.description=Ollama UI + Ollama server combined image
            base.image=ollama/ollama:latest
            base.image.digest=${{ steps.base_digest.outputs.digest }}
            build.triggered.by=${{ github.event_name }}
            commit.sha=${{ github.sha }}

      - name: Derive sha tag reference
        id: sha_ref
        run: |
          set -euo pipefail
          echo "All computed tags (comma separated):"
          echo '${{ steps.meta.outputs.tags }}'
          # Find a tag with :sha-<7hex>
          SHA_TAG=$(echo '${{ steps.meta.outputs.tags }}' | tr ',' '\n' | grep -E ':sha-[0-9a-f]{7}$' | head -n1 || true)
          if [ -z "$SHA_TAG" ]; then
            # Fallback construct (metadata action usually uses short sha)
            SHORT_SHA=$(git rev-parse --short=7 HEAD)
            SHA_TAG="ghcr.io/${{ steps.names.outputs.lower }}:sha-${SHORT_SHA}"
            echo "Fallback sha tag reference constructed: $SHA_TAG"
          else
            echo "Detected sha tag from metadata: $SHA_TAG"
          fi
          echo "image_ref=$SHA_TAG" >> $GITHUB_OUTPUT

      - name: Skip check (all events) - skip if same commit & base image digest
        id: skip_check
        run: |
          set -euo pipefail
          CURRENT_SHA=$(git rev-parse --short=7 HEAD)
          CUR_BASE_DIGEST='${{ steps.base_digest.outputs.digest }}'
          SHA_IMAGE="ghcr.io/${{ steps.names.outputs.lower }}:sha-${CURRENT_SHA}"
          echo "Event: $GITHUB_EVENT_NAME"
          echo "Current short SHA: $CURRENT_SHA"
          echo "Candidate sha image tag: $SHA_IMAGE"

          # Quick path: if image for this commit already exists AND base digest label matches -> skip
          if docker manifest inspect "$SHA_IMAGE" > /dev/null 2>&1; then
            docker pull -q "$SHA_IMAGE" > /dev/null 2>&1 || true
            EXIST_BASE=$(docker inspect -f '{{ index .Config.Labels "base.image.digest"}}' "$SHA_IMAGE" 2>/dev/null || echo '')
            if [ -n "$EXIST_BASE" ] && [ "$EXIST_BASE" = "$CUR_BASE_DIGEST" ]; then
              echo "Identical image (commit + base digest) already published -> skip"
              echo "skip=true" >> $GITHUB_OUTPUT
              exit 0
            else
              echo "Commit image exists but base digest differs/missing -> rebuild"
            fi
          fi

          # Determine previous built commit via latest tag (may be same digest)
          PREV_SHA=""
          LATEST_IMAGE="ghcr.io/${{ steps.names.outputs.lower }}:latest"
          if docker manifest inspect "$LATEST_IMAGE" > /dev/null 2>&1; then
            docker pull -q "$LATEST_IMAGE" > /dev/null 2>&1 || true
            PREV_SHA=$(docker inspect -f '{{ index .Config.Labels "commit.sha"}}' "$LATEST_IMAGE" 2>/dev/null || echo '')
            PREV_BASE_DIGEST=$(docker inspect -f '{{ index .Config.Labels "base.image.digest"}}' "$LATEST_IMAGE" 2>/dev/null || echo '')
            echo "Previous built commit (from latest tag): $PREV_SHA"
            echo "Previous base digest: $PREV_BASE_DIGEST"
          else
            echo "No latest image present. Will build (first build)."
          fi

          # Determine changed files between PREV_SHA and HEAD (if PREV_SHA available and in repo)
          RELEVANT_CHANGED=false
          BASE_CHANGED=false
          if [ -n "$PREV_BASE_DIGEST" ] && [ "$PREV_BASE_DIGEST" != "$CUR_BASE_DIGEST" ]; then
            BASE_CHANGED=true
          fi
          echo "Base changed? $BASE_CHANGED"

          if [ -n "$PREV_SHA" ] && git cat-file -e "$PREV_SHA^{commit}" 2>/dev/null; then
            echo "Computing diff vs previous built commit $PREV_SHA"
            git diff --name-only "$PREV_SHA" HEAD > /tmp/changed_files_full.txt
          else
            echo "No previous commit available for diff (building)."
            # Force treat as changed (so build will proceed unless base also unchanged and no ref) but we can still examine HEAD^ fallback
            if git rev-parse HEAD^ >/dev/null 2>&1; then
              git diff --name-only HEAD^ HEAD > /tmp/changed_files_full.txt || true
            fi
          fi
          echo "All changed files:"
          cat /tmp/changed_files_full.txt || true

          # Exclusions (README*, this workflow file)
          # Exclude docs / meta only changes (now also the what_is/ docs folder) so they don't force a rebuild
          EXCLUDE_REGEX='^(README(\..*)?|.github/workflows/docker-publish.yml|what_is/.*)$'
          if [ -f /tmp/changed_files_full.txt ]; then
            grep -Ev "$EXCLUDE_REGEX" /tmp/changed_files_full.txt > /tmp/changed_files.txt || true
          fi
          echo "Filtered changed files (exclusions removed):"
          cat /tmp/changed_files.txt || true

          # Relevant patterns (code / build impacting)
          RELEVANT_REGEX='^(Dockerfile(\.multi-platform)?|build.sh|ollama-ui/|Scraper/|Dockerfile|Dockerfile.multi-platform)'
          if [ -s /tmp/changed_files.txt ] && grep -E "$RELEVANT_REGEX" /tmp/changed_files.txt >/dev/null 2>&1; then
            RELEVANT_CHANGED=true
          fi
          echo "Relevant changed? $RELEVANT_CHANGED"

          # Decision: Build only if (RELEVANT_CHANGED == true) OR (BASE_CHANGED == true). Else skip.
          if [ "$RELEVANT_CHANGED" = true ] || [ "$BASE_CHANGED" = true ]; then
            echo "skip=false" >> $GITHUB_OUTPUT
            echo "Will build (relevant changes or base changed)."
          else
            echo "skip=true" >> $GITHUB_OUTPUT
            echo "Skipping: no relevant code changes AND base image unchanged."
          fi

      - name: Show decision context
        run: |
          echo "Skip flag: ${{ steps.skip_check.outputs.skip }}"
          echo "SHA image ref: ${{ steps.sha_ref.outputs.image_ref }}"
          echo "Base digest: ${{ steps.base_digest.outputs.digest }}"

      - name: Guard (stop early if skipping)
        if: steps.skip_check.outputs.skip == 'true'
        run: |
          echo "Skipping build & push steps."

      - name: Build and push (single-arch amd64)
        if: steps.skip_check.outputs.skip != 'true'
        uses: docker/build-push-action@v6
        with:
          context: .
          file: Dockerfile
          push: true
          platforms: linux/amd64
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          provenance: false
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Summarize
        run: |
          if [ "${{ steps.skip_check.outputs.skip }}" = "true" ]; then
            echo "Build skipped: existing image for commit with identical base digest." >> $GITHUB_STEP_SUMMARY
          else
            echo "Published (lowercase) image: ghcr.io/${{ steps.names.outputs.lower }}" >> $GITHUB_STEP_SUMMARY
            echo "Tags:" >> $GITHUB_STEP_SUMMARY
            echo "${{ steps.meta.outputs.tags }}" | tr ',' '\n' >> $GITHUB_STEP_SUMMARY
            echo "\nHint: Ensure the container package visibility is Public under Settings > Packages if pulls return 403." >> $GITHUB_STEP_SUMMARY
          fi
