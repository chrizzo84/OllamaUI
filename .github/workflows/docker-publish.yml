name: Docker Publish

on:
  push:
    branches: [ main ]
    paths:
      - 'Dockerfile'
      - 'Dockerfile.multi-platform'
      - 'ollama-ui/**'
      - '.github/workflows/docker-publish.yml'
  workflow_dispatch:
  release:
    types: [published]
  schedule:
    # Run every night at 02:30 UTC
    - cron: '30 2 * * *'

permissions:
  contents: read
  packages: write

concurrency:
  group: docker-publish-${{ github.ref }}
  cancel-in-progress: true

env:
  REGISTRY: ghcr.io
  # Original mixed-case repo (cannot rely on automatic lowercasing by all tooling)
  IMAGE_NAME_ORIG: ${{ github.repository }}

jobs:
  build-and-push:
    runs-on: ubuntu-latest
    timeout-minutes: 40
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
        with:
          install: true

      - name: Log in to GHCR
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Compute lowercase image name
        id: names
        run: |
          echo "orig=$IMAGE_NAME_ORIG" >> $GITHUB_OUTPUT
          echo "lower=${IMAGE_NAME_ORIG,,}" >> $GITHUB_OUTPUT
        env:
          IMAGE_NAME_ORIG: ${{ env.IMAGE_NAME_ORIG }}

      - name: Fetch base image digest (ollama/ollama:latest)
        id: base_digest
        run: |
          set -euo pipefail
          docker pull -q ollama/ollama:latest > /dev/null
          # Get canonical digest (repo@sha256:...)
          DIGEST_LINE=$(docker image inspect ollama/ollama:latest --format '{{index .RepoDigests 0}}')
          # Extract just sha256:...
          BASE_DIGEST=${DIGEST_LINE##*@}
          echo "Current base image digest: $BASE_DIGEST"
          echo "digest=$BASE_DIGEST" >> $GITHUB_OUTPUT

      - name: Skip check (schedule only - skip if image for commit already exists)
        id: skip_check
        if: github.event_name == 'schedule'
        run: |
          set -euo pipefail
          SHORT_SHA=$(git rev-parse --short=7 HEAD)
          IMAGE="ghcr.io/${{ steps.names.outputs.lower }}:sha-${SHORT_SHA}"
          CUR_BASE_DIGEST='${{ steps.base_digest.outputs.digest }}'
          echo "Checking if image already exists: $IMAGE"
          NEED_BUILD=true
          if docker manifest inspect "$IMAGE" > /dev/null 2>&1; then
            echo "Image with same commit SHA exists. Verifying base image digest..."
            # Pull (quiet) to read labels
            docker pull -q "$IMAGE" > /dev/null 2>&1 || true
            EXISTING_BASE_DIGEST=$(docker inspect -f '{{ index .Config.Labels "base.image.digest"}}' "$IMAGE" 2>/dev/null || echo 'unknown')
            echo "Current base digest: $CUR_BASE_DIGEST"
            echo "Existing base digest in published image: $EXISTING_BASE_DIGEST"
            if [ "$EXISTING_BASE_DIGEST" = "$CUR_BASE_DIGEST" ] && [ "$EXISTING_BASE_DIGEST" != "" ] && [ "$EXISTING_BASE_DIGEST" != "unknown" ]; then
              echo "Base image digest unchanged. Skipping build & push."
              NEED_BUILD=false
            else
              echo "Base image digest changed or missing. Rebuild required."
            fi
          else
            echo "No existing image for this commit found. Rebuild required."
          fi
          if [ "$NEED_BUILD" = true ]; then
            echo "skip=false" >> $GITHUB_OUTPUT
          else
            echo "skip=true" >> $GITHUB_OUTPUT
          fi

      - name: Extract Docker metadata
        id: meta
        if: ${{ github.event_name != 'schedule' || steps.skip_check.outputs.skip != 'true' }}
        uses: docker/metadata-action@v5
        with:
          images: |
            ${{ env.REGISTRY }}/${{ steps.names.outputs.lower }}
          tags: |
            type=ref,event=branch
            type=ref,event=tag
            type=sha
            type=raw,value=latest,enable=${{ github.ref == 'refs/heads/main' }}
            # If tag matches v* use semver patterns (produces v1.2.3, v1.2, v1)
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}
            type=semver,pattern={{major}},enable=${{ startsWith(github.ref, 'refs/tags/v') }}
          labels: |
            org.opencontainers.image.source=${{ github.repositoryUrl }}
            org.opencontainers.image.description=Ollama UI + Ollama server combined image
            base.image=ollama/ollama:latest
            base.image.digest=${{ steps.base_digest.outputs.digest }}
            build.triggered.by=${{ github.event_name }}

      - name: Build and push (single-arch amd64)
        if: ${{ github.event_name != 'schedule' || steps.skip_check.outputs.skip != 'true' }}
        uses: docker/build-push-action@v6
        with:
          context: .
          file: Dockerfile
          push: true
          platforms: linux/amd64
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          provenance: false
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Summarize
        run: |
          if [ "${{ github.event_name }}" = "schedule" ] && [ "${{ steps.skip_check.outputs.skip }}" = "true" ]; then
            echo "Scheduled run: No changes since last build. Push skipped." >> $GITHUB_STEP_SUMMARY
          else
            echo "Published (lowercase) image: ghcr.io/${{ steps.names.outputs.lower }}" >> $GITHUB_STEP_SUMMARY
            echo "Tags:" >> $GITHUB_STEP_SUMMARY
            echo "${{ steps.meta.outputs.tags }}" | tr ',' '\n' >> $GITHUB_STEP_SUMMARY
            echo "\nHint: Ensure the container package visibility is Public under Settings > Packages if pulls return 403." >> $GITHUB_STEP_SUMMARY
          fi
